package org.openmrs.module.muzima.handler;

import org.assertj.core.api.Assertions;
import org.junit.Before;
import org.junit.Test;
import org.openmrs.module.muzima.model.QueueData;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.test.context.ContextConfiguration;

@ContextConfiguration(locations = "/service-test-context.xml")
public class JsonRegistrationQueueDataHandlerTest {

    private JsonGenericRegistrationQueueDataHandler jsonRegistrationQueueDataHandler;
    @Autowired
    private QueueData queueData;

    @Before
    public void setUp() {
        ApplicationContext testApplicationContext = new ClassPathXmlApplicationContext("service-test-context.xml");
        jsonRegistrationQueueDataHandler = new JsonGenericRegistrationQueueDataHandler();

    }

    @Test
    public void process() throws Exception {
    }

    @Test
    public void validate() throws Exception {
    }

    @Test
    public void getDiscriminator() throws Exception {
    }

    @Test
    public void validateUnsavedPatient() throws Exception {
    }

    @Test
    public void populateUnsavedPatientFromPayload() throws Exception {
    }

    @Test
    public void setPatientIdentifiersFromPayload() throws Exception {
    }

    @Test
    public void getAutogeneratedIdentifier() throws Exception {
    }

    @Test
    public void getMedicalRecordNumberFromPayload() throws Exception {
    }

    @Test
    public void getOtherPatientIdentifiersFromPayload() throws Exception {
    }

    @Test
    public void createPatientIdentifier() throws Exception {
    }

    @Test
    public void createPatientIdentifier1() throws Exception {
    }

    @Test
    public void setIdentifierTypeLocation() throws Exception {
    }

    @Test
    public void setPatientBirthDateFromPayload() throws Exception {
    }

    @Test
    public void setPatientBirthDateEstimatedFromPayload() throws Exception {
    }

    @Test
    public void setPatientGenderFromPayload() throws Exception {
    }

    @Test
    public void setPatientNameFromPayload() throws Exception {
    }

    @Test
    public void registerUnsavedPatient() throws Exception {
    }

    @Test
    public void getPatientUuidFromPayload() throws Exception {
    }

    @Test
    public void setPatientAddressesFromPayload() throws Exception {
    }

    @Test
    public void getPatientAddressFromJsonObject() throws Exception {
    }

    @Test
    public void setPersonAttributesFromPayload() throws Exception {
    }

    @Test
    public void getPatientAdttributeFromJsonObject() throws Exception {
    }

    @Test
    public void findSimilarSavedPatient() throws Exception {
    }

    @Test
    public void getElementFromJsonObject() throws Exception {
    }

    @Test
    public void accept() throws Exception {
    }

    @Test
    public void getDiscriminatorValueTest() {
        Assertions.assertThat(jsonRegistrationQueueDataHandler.getDiscriminator()).isNotNull();
        Assertions.assertThat(jsonRegistrationQueueDataHandler.getDiscriminator()).isNotEmpty();
        Assertions.assertThat(jsonRegistrationQueueDataHandler.getDiscriminator()).isEqualTo("json-registration");
    }


}